name: Release and Deployment

on:
    workflow_dispatch:
        inputs:
            release_type:
                description: "Type of release"
                required: true
                type: choice
                options:
                    - patch
                    - minor
                    - major
                    - hotfix
            target_environment:
                description: "Target environment"
                required: true
                type: choice
                options:
                    - staging
                    - production

permissions:
    contents: write
    packages: write
    pull-requests: write

jobs:
    # Job 1: Validate release
    validate-release:
        name: Validate Release
        runs-on: ubuntu-latest
        timeout-minutes: 10

        outputs:
            new-version: ${{ steps.version.outputs.new-version }}
            release-notes: ${{ steps.release-notes.outputs.notes }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Validate package.json
              run: |
                  if [ ! -f "package.json" ]; then
                      echo "‚ùå package.json n√£o encontrado!"
                      exit 1
                  fi
                  echo "‚úÖ package.json validado"

            - name: Calculate new version
              id: version
              run: |
                  CURRENT_VERSION=$(jq -r '.version' package.json)
                  echo "Current version: $CURRENT_VERSION"

                  IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

                  case "${{ github.event.inputs.release_type }}" in
                      patch)
                          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                          ;;
                      minor)
                          NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                          ;;
                      major)
                          NEW_VERSION="$((MAJOR + 1)).0.0"
                          ;;
                      hotfix)
                          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))-hotfix"
                          ;;
                  esac

                  echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
                  echo "‚úÖ New version: $NEW_VERSION"

            - name: Generate release notes
              id: release-notes
              run: |
                  RELEASE_NOTES="Release: ${{ steps.version.outputs.new-version }}\n"
                  RELEASE_NOTES+="Date: $(date '+%Y-%m-%d %H:%M:%S')\n"
                  RELEASE_NOTES+="Type: ${{ github.event.inputs.release_type }}\n"
                  RELEASE_NOTES+="Environment: ${{ github.event.inputs.target_environment }}\n\n"

                  echo "notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT

    # Job 2: Build release artifacts
    build-release:
        name: Build Release Artifacts
        runs-on: ubuntu-latest
        timeout-minutes: 30
        needs: validate-release

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run tests
              run: npm run test -- --passWithNoTests || true

            - name: Build application
              run: npm run build

            - name: Create release bundle
              run: |
                  mkdir -p release
                  tar -czf release/terral-social-${{ needs.validate-release.outputs.new-version }}.tar.gz \
                      .next package.json package-lock.json prisma/ public/ \
                      --exclude=node_modules --exclude=.env --exclude=.env.local

            - name: Calculate checksum
              run: |
                  cd release
                  sha256sum terral-social-${{ needs.validate-release.outputs.new-version }}.tar.gz > \
                      terral-social-${{ needs.validate-release.outputs.new-version }}.tar.gz.sha256

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: release-artifacts
                  path: release/
                  retention-days: 30

    # Job 3: Update version files
    update-version:
        name: Update Version Files
        runs-on: ubuntu-latest
        timeout-minutes: 10
        needs: validate-release

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Update package.json
              run: |
                  jq '.version = "${{ needs.validate-release.outputs.new-version }}"' package.json > package.json.tmp
                  mv package.json.tmp package.json
                  cat package.json | grep version

            - name: Update CHANGELOG.md
              run: |
                  DATE=$(date '+%Y-%m-%d')
                  cat > CHANGELOG.tmp << EOF
                  # Changelog

                  ## [${{ needs.validate-release.outputs.new-version }}] - $DATE

                  ### Changed
                  - Release ${{ needs.validate-release.outputs.new-version }}
                  - Type: ${{ github.event.inputs.release_type }}
                  - Environment: ${{ github.event.inputs.target_environment }}

                  EOF
                  cat CHANGELOG.md >> CHANGELOG.tmp
                  mv CHANGELOG.tmp CHANGELOG.md

            - name: Commit changes
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add package.json CHANGELOG.md
                  git commit -m "chore: release v${{ needs.validate-release.outputs.new-version }}" || true

            - name: Push changes
              run: |
                  git push origin main || true

    # Job 4: Deploy to staging
    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        timeout-minutes: 30
        needs: [validate-release, build-release]
        if: ${{ github.event.inputs.target_environment == 'staging' || github.event.inputs.target_environment == 'production' }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                  name: release-artifacts
                  path: release/

            - name: Deploy to staging VPS
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.STAGING_VPS_HOST }}
                  username: ${{ secrets.STAGING_VPS_USER }}
                  key: ${{ secrets.STAGING_VPS_SSH_KEY }}
                  port: 22
                  timeout: 5m
                  command_timeout: 20m
                  script: |
                      set -euo pipefail
                      DEPLOY_DIR="/opt/terralsocial-staging"
                      RELEASE_FILE="terral-social-${{ needs.validate-release.outputs.new-version }}.tar.gz"

                      echo "========================================="
                      echo "üöÄ Deploy para Staging"
                      echo "========================================="

                      mkdir -p "$DEPLOY_DIR"
                      cd "$DEPLOY_DIR"

                      # Backup atual
                      if [ -d "current" ]; then
                          echo "üíæ Fazendo backup da vers√£o atual..."
                          cp -r current "backup-$(date +%Y%m%d_%H%M%S)"
                      fi

                      # Parar containers
                      echo "üõë Parando containers..."
                      docker compose down --remove-orphans 2>/dev/null || true

                      # Extrair nova vers√£o
                      echo "üì¶ Extraindo nova vers√£o..."
                      tar -xzf "release/$RELEASE_FILE" -C . || exit 1

                      # Criar novo ambiente
                      mkdir -p current
                      cp -r .next package.json package-lock.json prisma/ public/ current/ 2>/dev/null || true

                      # Iniciar containers
                      echo "‚ñ∂Ô∏è Iniciando containers..."
                      docker compose up -d --build

                      # Verificar
                      sleep 30
                      APP_URL="${{ secrets.NEXT_PUBLIC_APP_URL }}"
                      if curl -f -s "$APP_URL" > /dev/null 2>&1; then
                          echo "‚úÖ Deploy para Staging bem-sucedido!"
                      else
                          echo "‚ùå Falha na verifica√ß√£o!"
                          exit 1
                      fi

                      echo "========================================="

    # Job 5: Run staging tests
    staging-tests:
        name: Staging Tests
        runs-on: ubuntu-latest
        timeout-minutes: 20
        needs: deploy-staging

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run tests against staging
              run: |
                  echo "üß™ Executando testes contra staging..."
                  BASE_URL="${{secrets.NEXT_PUBLIC_APP_URL}}"

                  # Validar disponibilidade
                  if curl -f -s "$BASE_URL" > /dev/null 2>&1; then
                      echo "‚úÖ Staging dispon√≠vel"
                  else
                      echo "‚ùå Staging indispon√≠vel!"
                      exit 1
                  fi

                  echo "‚úÖ Testes de staging conclu√≠dos"

    # Job 6: Approval para production
    approval-production:
        name: Approval for Production
        runs-on: ubuntu-latest
        timeout-minutes: 120
        needs: [validate-release, staging-tests]
        if: github.event.inputs.target_environment == 'production'
        environment:
            name: production

        steps:
            - name: Wait for approval
              run: |
                  echo "========================================="
                  echo "‚è≥ Aguardando aprova√ß√£o para production"
                  echo "========================================="
                  echo "Version: ${{ needs.validate-release.outputs.new-version }}"
                  echo "Type: ${{ github.event.inputs.release_type }}"
                  echo "Status: Aguardando revis√£o..."
                  echo "========================================="

    # Job 7: Deploy to production
    deploy-production:
        name: Deploy to Production
        runs-on: ubuntu-latest
        timeout-minutes: 30
        needs: [validate-release, build-release, approval-production]
        if: github.event.inputs.target_environment == 'production'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                  name: release-artifacts
                  path: release/

            - name: Create database backup
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USER }}
                  key: ${{ secrets.VPS_SSH_KEY }}
                  port: 22
                  timeout: 5m
                  command_timeout: 15m
                  script: |
                      set -euo pipefail
                      echo "üíæ Fazendo backup do banco de dados..."
                      docker exec terralsocial-postgres pg_dump \
                          -U ${{ secrets.POSTGRES_USER }} \
                          ${{ secrets.POSTGRES_DB }} | \
                          gzip > /opt/backups/terralsocial/pre-deploy-${{ needs.validate-release.outputs.new-version }}.sql.gz
                      echo "‚úÖ Backup conclu√≠do"

            - name: Deploy to production VPS
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: ${{ secrets.VPS_USER }}
                  key: ${{ secrets.VPS_SSH_KEY }}
                  port: 22
                  timeout: 5m
                  command_timeout: 20m
                  script: |
                      set -euo pipefail
                      DEPLOY_DIR="/opt/terralsocial"
                      RELEASE_FILE="terral-social-${{ needs.validate-release.outputs.new-version }}.tar.gz"

                      echo "========================================="
                      echo "üöÄ Deploy para Production"
                      echo "========================================="

                      cd "$DEPLOY_DIR"

                      # Parar containers
                      echo "üõë Parando containers..."
                      docker compose down --remove-orphans

                      # Limpar
                      echo "üßπ Limpando recursos..."
                      docker system prune -f

                      # Extrair
                      echo "üì¶ Extraindo nova vers√£o..."
                      tar -xzf "release/$RELEASE_FILE" -C .

                      # Iniciar
                      echo "‚ñ∂Ô∏è Iniciando containers..."
                      docker compose up -d --build

                      # Aguardar
                      echo "‚è≥ Aguardando servi√ßos..."
                      sleep 40

                      # Migrations
                      echo "üóÑÔ∏è Executando migrations..."
                      docker exec terralsocial-nextjs npx prisma db push --skip-generate || true

                      # Verificar
                      APP_URL="${{ secrets.NEXT_PUBLIC_APP_URL }}"
                      if curl -f -s "$APP_URL" > /dev/null 2>&1; then
                          echo "‚úÖ Deploy para Production bem-sucedido!"
                      else
                          echo "‚ùå Falha na verifica√ß√£o!"
                          exit 1
                      fi

                      echo "========================================="

    # Job 8: Create GitHub Release
    create-release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        timeout-minutes: 10
        needs: [validate-release, build-release, deploy-production]
        if: ${{ github.event.inputs.target_environment == 'production' && success() }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                  name: release-artifacts
                  path: release/

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ needs.validate-release.outputs.new-version }}
                  name: Release ${{ needs.validate-release.outputs.new-version }}
                  body: |
                      ${{ needs.validate-release.outputs.release-notes }}

                      ### Release Details
                      - **Type**: ${{ github.event.inputs.release_type }}
                      - **Date**: $(date '+%Y-%m-%d %H:%M:%S')
                      - **Commit**: ${{ github.sha }}

                      ### Download
                      See the attachments below.
                  files: |
                      release/terral-social-*.tar.gz
                      release/terral-social-*.sha256
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Job final: Release summary
    release-summary:
        name: Release Summary
        runs-on: ubuntu-latest
        if: always()
        needs:
            [
                validate-release,
                build-release,
                update-version,
                deploy-staging,
                staging-tests,
            ]

        steps:
            - name: Print summary
              run: |
                  echo "========================================="
                  echo "üìä Release Summary"
                  echo "========================================="
                  echo "Version: ${{ needs.validate-release.outputs.new-version }}"
                  echo "Type: ${{ github.event.inputs.release_type }}"
                  echo "Environment: ${{ github.event.inputs.target_environment }}"
                  echo "Date: $(date '+%Y-%m-%d %H:%M:%S')"
                  echo "Commit: ${{ github.sha }}"
                  echo "========================================="
