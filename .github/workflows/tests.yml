name: Tests

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

env:
    NODE_ENV: test
    DATABASE_URL: postgresql://test:test@localhost:5432/terral_test
    REDIS_URL: redis://localhost:6379

concurrency:
    group: tests-${{ github.ref }}
    cancel-in-progress: true

jobs:
    integration-tests:
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:15-alpine
                env:
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: test
                    POSTGRES_DB: terral_test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

            redis:
                image: redis:7-alpine
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: npm

            - name: Install dependencies
              run: npm ci

            - name: Setup database
              run: |
                  npx prisma migrate deploy
                  npx prisma db seed

            - name: Run integration tests
              run: npm run test:integration -- --coverage --maxWorkers=2
              timeout-minutes: 10

            - name: Upload integration test coverage
              uses: codecov/codecov-action@v3
              with:
                  files: ./coverage/lcov.info
                  flags: integration-tests
                  fail_ci_if_error: false

    lighthouse-audit:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: npm

            - name: Install dependencies
              run: npm ci

            - name: Build application
              run: npm run build

            - name: Run Lighthouse audit
              uses: treosh/lighthouse-ci-action@v10
              with:
                  configPath: ./lighthouserc.json
                  uploadArtifacts: true
                  temporaryPublicStorage: true

            - name: Comment PR with results
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const fs = require('fs');
                      const report = JSON.parse(fs.readFileSync('./lh-results.json'));
                      const score = Math.min(...report.map(r => r.summary['performance']));
                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: `🔍 Lighthouse Performance Score: ${score}`
                      });

    bundle-analysis:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: npm

            - name: Install dependencies
              run: npm ci

            - name: Build bundle
              run: npm run build

            - name: Analyze bundle size
              run: |
                  npm install -D bundle-analyzer
                  npx next-bundle-analyzer

            - name: Upload bundle analysis
              uses: actions/upload-artifact@v3
              with:
                  name: bundle-analysis
                  path: .next/bundle-analysis
                  retention-days: 5

    security-tests:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy results
              uses: github/codeql-action/upload-sarif@v2
              with:
                  sarif_file: "trivy-results.sarif"

            - name: Check for secrets
              uses: trufflesecurity/trufflehog@main
              with:
                  path: ./
                  base: ${{ github.event.repository.default_branch }}
                  head: HEAD
                  extra_args: --debug

    e2e-tests:
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:15-alpine
                env:
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: test
                    POSTGRES_DB: terral_test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

            redis:
                image: redis:7-alpine
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: npm

            - name: Install dependencies
              run: npm ci

            - name: Install Playwright
              run: npx playwright install --with-deps

            - name: Setup database
              run: |
                  npx prisma migrate deploy
                  npx prisma db seed

            - name: Start application
              run: npm run start &
              timeout-minutes: 5

            - name: Wait for application
              run: |
                  npx wait-on http://localhost:3000 --timeout 30000

            - name: Run E2E tests
              run: npm run test:e2e -- --reporter=html
              timeout-minutes: 15

            - name: Upload E2E report
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: e2e-report
                  path: playwright-report/
                  retention-days: 7

    performance-monitoring:
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: npm

            - name: Install dependencies
              run: npm ci

            - name: Build application
              run: npm run build

            - name: Measure build time
              run: |
                  echo "Build completed at $(date)" > build-metrics.txt
                  du -sh .next >> build-metrics.txt

            - name: Store metrics
              uses: actions/upload-artifact@v3
              with:
                  name: build-metrics
                  path: build-metrics.txt
                  retention-days: 30

    accessibility-tests:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: npm

            - name: Install dependencies
              run: npm ci

            - name: Install Playwright
              run: npx playwright install --with-deps

            - name: Build application
              run: npm run build

            - name: Run accessibility tests
              run: |
                  npm install -D @axe-core/playwright
                  npx playwright test --project=accessibility || true

            - name: Generate accessibility report
              if: always()
              run: |
                  echo "# Accessibility Test Report" > accessibility-report.md
                  echo "Tests completed at $(date)" >> accessibility-report.md

            - name: Upload accessibility report
              uses: actions/upload-artifact@v3
              with:
                  name: accessibility-report
                  path: accessibility-report.md
                  retention-days: 7

    tests-summary:
        runs-on: ubuntu-latest
        needs:
            [
                integration-tests,
                lighthouse-audit,
                bundle-analysis,
                security-tests,
                e2e-tests,
                performance-monitoring,
                accessibility-tests,
            ]
        if: always()
        steps:
            - name: Check test results
              run: |
                  echo "### Test Results Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Lighthouse Audit: ${{ needs.lighthouse-audit.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Bundle Analysis: ${{ needs.bundle-analysis.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Performance Monitoring: ${{ needs.performance-monitoring.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY

            - name: Fail if any test failed
              if: contains(needs.*.result, 'failure')
              run: exit 1
